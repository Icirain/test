/* STUDENTS:  DO NOT EDIT THIS FILE.  INSTEAD, CREATE YOUR OWN UNIT TESTS ACCORDING
TO THE LAB DOCUMENT.
*/

// Google Test Framework
#include <gtest/gtest.h>
#include <cmath>

// Project code from the ../src directory
#include "../src/vector2d.h"

/*******************************************************************************
 * Test Cases
 ******************************************************************************/
#ifdef FEEDBACK_TEST_01

/************************************************************************
* SETUP
*************************************************************************/
class VectorTest : public ::testing::Test {
 public:
   VectorTest():v2(1,2) {}
 protected:
   virtual void SetUp() {
     v3.set_x(0.2);
     v3.set_y(1.2);

     // Set up in the four quadrants, all with magnitude 5
     v_q1.set_x(3);
     v_q1.set_y(4);
     v_q2.set_x(-3);
     v_q2.set_y(4);
     v_q3.set_x(-3);
     v_q3.set_y(-4);
     v_q4.set_x(3);
     v_q4.set_y(-4);
   }

  /* declare members */
   Vector2d v1;
   Vector2d v2;
   Vector2d v3;

   // vector in each quadrant
   Vector2d v_q0;
   Vector2d v_q1;
   Vector2d v_q2;
   Vector2d v_q3;
   Vector2d v_q4;
 };

/*************************************************************/
/** TESTS for Methods of Vector2d ****************************/
/*************************************************************/

// default constructor
TEST_F(VectorTest,DefaultConstructor){
  EXPECT_EQ(v1.get_x(),0) << "\nFAIL DefaultConstructor: x\n";
  EXPECT_EQ(v1.get_y(),0) << "\nFAIL DefaultConstructor: y\n";
}

// constructor with input (x,y)
TEST_F(VectorTest,ConstructorwithInput){
  EXPECT_EQ(v2.get_x(),1) << "\nFAIL ConstructorWithInput: x\n";
  EXPECT_EQ(v2.get_y(),2) << "\nFAIL ConstructorWithInput: y\n";
}


// constructor with input (double theta)
// >>>>>>> Write this test.

// operator plus
TEST_F(VectorTest,OperatorPlus){
  Vector2d v_result = v2+v3;
  EXPECT_EQ(v_result.get_x(),1.2) << "\nFAIL Op+: x\n";
  EXPECT_EQ(v_result.get_y(),3.2) << "\nFAIL Op+: y\n";
}

// operator minus
/// >>>>>> WRITE THIS TEST


/************************************************************************
* get direction
* - each quadrant
* - at (0,0)
*************************************************************************/
TEST_F(VectorTest,GetDirection){
  // Border Cases
  v3.set_xy(1,0);
  EXPECT_EQ(v3.GetDirection(),0) << "\nFAIL GetDirection: +x\n";
  v3.set_xy(0,1);
  EXPECT_EQ(v3.GetDirection(),atan2(1,0)) << "\nFAIL GetDirection: +y\n";
  v3.set_xy(-1,0);
  EXPECT_EQ(v3.GetDirection(),atan2(0,-1)) << "\nFAIL GetDirection: -x\n";
  v3.set_xy(0,-1);
  EXPECT_EQ(v3.GetDirection(),atan2(-1,0)) << "\nFAIL GetDirection: -y\n";

  // Quadrants
  v3.set_xy(1,1);
  EXPECT_EQ(v3.GetDirection(),atan2(1,1)) << "\nFAIL GetDirection: q1\n";
  v3.set_xy(-1,1);
  EXPECT_EQ(v3.GetDirection(),atan2(1,-1)) << "\nFAIL GetDirection: q2\n";
  v3.set_xy(-1,-1);
  EXPECT_EQ(v3.GetDirection(),atan2(-1,-1)) << "\nFAIL GetDirection: q3\n";
  v3.set_xy(1,-1);
  EXPECT_EQ(v3.GetDirection(),atan2(-1,1)) << "\nFAIL GetDirection: q4\n";
}

/************************************************************************
* get magnitude
* - each quadrant
* - at (0,0)
*************************************************************************/
TEST_F(VectorTest,GetMagnitude){
  EXPECT_EQ(v_q0.GetMagnitude(),0) << "\nFAIL GetMagnitude: origin\n";
  EXPECT_EQ(v_q1.GetMagnitude(),5) << "\nFAIL GetMagnitude: quadrant 1\n";
  EXPECT_EQ(v_q2.GetMagnitude(),5) << "\nFAIL GetMagnitude: quadrant 2\n";
  EXPECT_EQ(v_q3.GetMagnitude(),5) << "\nFAIL GetMagnitude: quadrant 3\n";
  EXPECT_EQ(v_q4.GetMagnitude(),5) << "\nFAIL GetMagnitude: quadrant 4\n";
}

/************************************************************************
* SetMagnitude
* - positive magnitude in each quadrant
* - negative magnitude in each quadrant
* - 0
*************************************************************************/
TEST_F(VectorTest,SetMagnitude){
  // Tests for setting positive magnitude.
  v_q1.SetMagnitude(10);
  EXPECT_EQ(v_q1.GetMagnitude(),10) << "\nFAIL SetMagnitude: + quadrant 1\n";

  v_q2.SetMagnitude(12);
  EXPECT_EQ(v_q2.GetMagnitude(),12) << "\nFAIL SetMagnitude + quadrant 2\n";

  v_q3.SetMagnitude(3);
  EXPECT_EQ(v_q3.GetMagnitude(),3) << "\nFAIL SetMagnitude: + quadrant 3\n";

  v_q4.SetMagnitude(5);
  EXPECT_EQ(v_q4.GetMagnitude(),5) << "\nFAIL SetMagnitude: + quadrant 4\n";

  // Tests for setting negative magnitude. Which should also rotate the
  // heading by pi.
  v_q1.SetMagnitude(-10);
  EXPECT_EQ(v_q1.GetMagnitude(),10) << "\nFAIL SetMagnitude: (-) quadrant 1\n";

  v_q2.SetMagnitude(-12);
  EXPECT_EQ(v_q2.GetMagnitude(),12) << "\nFAIL SetMagnitude: (-) quadrant 2\n";

  v_q3.SetMagnitude(-3);
  EXPECT_EQ(v_q3.GetMagnitude(),3) << "\nFAIL SetMagnitude: (-) quadrant 3\n";

  v_q4.SetMagnitude(-5);
  EXPECT_EQ(v_q4.GetMagnitude(),5) << "\nFAIL SetMagnitude: (-) quadrant 4\n";

  v_q1.SetMagnitude(0);
  EXPECT_EQ(v_q1.GetMagnitude(),0) << "\nFAIL SetMagnitude: 0\n";
}

// Test of RotateByRadians
// Consider the test cases (i.e. input). There are several you should use.
// >>>>>>>> WRITE THIS TEST.

// Test of DistanceBetween
// >>>>>>>> WRITE THIS TEST.


#endif
